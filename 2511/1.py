# Реализуйте функцию, принимающую на вход непустой тензор (может быть многомерным)
# и некоторое число  и возвращающую ближайший к числу элемент тензора.
# Если ближайших несколько - выведите минимальный из ближайших. (Вернуть нужно само число, а не индекс числа!)

import numpy as np
from numpy.testing import assert_equal


def nearest_value(X: np.ndarray, a: float) -> float:
    array = np.sort(X.ravel())
    idx = np.abs(array-a).argmin()
    return array[idx]
    pass


def main():
    ######################################################
    assert_equal(
        nearest_value(np.array([1, 2, 13]), 10),
        13)
    ######################################################
    assert_equal(
        nearest_value(np.array([-1, 0]), -0.5),
        -1)
    ######################################################
    assert_equal(
        nearest_value(np.array([[[1], [2], [3]], [[4], [5], [6]]]), 4.5),
        4)
    ######################################################
    assert_equal(
        nearest_value(np.array([[1, 2, 13],
                                [15, 6, 8],
                                [7, 18, 9]]), 7.2),
        7)
    ######################################################
    assert_equal(
        nearest_value(np.array([[-1, -2],
                                [-15, -6]]), -100),
        -15)
    ######################################################
    assert_equal(
        nearest_value(np.array([[2, 2],
                                [12, 12]]), 7),
        2)
    ######################################################
    assert_equal(
        nearest_value(np.array([[-2, -2],
                                [-12, -12]]), -7),
        -12)


if __name__ == '__main__':
    main()